<!DOCTYPE html>
<html>
	<head>
        <title>.FIT</title>
        <meta charset="UTF-8">
    </head>
    <body>
    <input type="file" id="input" onchange="loadFIT(this.files[0])"><p>
        <div id="fit"></div>
    <script>
        // http://www.onicos.com/staff/iz/amuse/javascript/expert/utf.txt

        /* utf.js - UTF-8 <=> UTF-16 convertion
        *
        * Copyright (C) 1999 Masanao Izumo <iz@onicos.co.jp>
        * Version: 1.0
        * LastModified: Dec 25 1999
        * This library is free.  You can redistribute it and/or modify it.
        */

        function Utf8ArrayToStr(array) {
            var out, i, len, c;
            var char2, char3;

            out = "";
            len = array.length;
            i = 0;
            while(i < len) {
            c = array[i++];
            switch(c >> 4)
            { 
            case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7:
                // 0xxxxxxx
                out += String.fromCharCode(c);
                break;
            case 12: case 13:
                // 110x xxxx   10xx xxxx
                char2 = array[i++];
                out += String.fromCharCode(((c & 0x1F) << 6) | (char2 & 0x3F));
                break;
            case 14:
                // 1110 xxxx  10xx xxxx  10xx xxxx
                char2 = array[i++];
                char3 = array[i++];
                out += String.fromCharCode(((c & 0x0F) << 12) |
                            ((char2 & 0x3F) << 6) |
                            ((char3 & 0x3F) << 0));
                break;
            }
            }

            return out;
        }

        const HEADER_TYPE = 0b10000000;
        const MESSAGE_TYPE = 0b01000000;
        const LOCAL_MESSAGE_TYPE = 0b00001111;
        var fr = new FileReader(); // déclare un fichier

        var mesg_num = [];
        mesg_num[0] = 'file_id';
        mesg_num[1] = 'capabilities';
        mesg_num[2] = 'device_settings';
        mesg_num[3] = 'user_profile';
        mesg_num[4] = 'hrm_profile';
        mesg_num[5] = 'sdm_profile';
        mesg_num[6] = 'bike_profile';
        mesg_num[7] = 'zones_target';
        mesg_num[8] = 'hr_zone';
        mesg_num[9] = 'power_zone';
        mesg_num[10] = 'met_zone';
        mesg_num[12] = 'sport';
        mesg_num[15] = 'goal';
        mesg_num[18] = 'session';
        mesg_num[19] = 'lap';
        mesg_num[20] = 'record';
        mesg_num[21] = 'event';
        mesg_num[23] = 'device_info';
        mesg_num[26] = 'workout';
        mesg_num[27] = 'workout_step';
        mesg_num[34] = 'activity';
        mesg_num[49] = 'file_creator';
        
        function loadFIT(f) {
            fr.readAsArrayBuffer(f);
        }
        var fit_definition = [];
        var div_fit = document.getElementById('fit');
        var fit_out = '';
        fr.onprogress = function(data) {
            if (data.lengthComputable) {                                            
                var progress = parseInt( ((data.loaded / data.total) * 100), 10 );
                console.log(progress);
            }
        }
        fr.onload = function(e) { // when the file is loaded
            let fit_head_len = new DataView(fr["result"], 0, 1).getUint8(0); // header lenght
            // pv = new DataView(fr["result"], 2, 2).getUint16(0,true);
            let fit_sign = String.fromCharCode.apply(null, new Uint8Array(fr["result"], 8, 4)); // signature : .FIT"
            let fit_data_len = new DataView(fr["result"], 4, 4).getUint32(0,true); // data lenght
            let fit_file_len = fit_head_len + fit_data_len
            let endian = true;
            for (let i = fit_head_len; i < fit_file_len; ) { // we run through the data
                let h = new DataView(fr["result"], i++, 1).getUint8(0);
                let fit_lmt = 0;
                let compr = false;
                let def = true;
                if (h & HEADER_TYPE) { // compressed timestamp header
                        fit_out+= '<p style="background-color:#ffbfb3">compressed<br>';
                    fit_lmt = (h & 0b00110000)>>>4;
                    compr = true; def = false;
                } else { // normal header
                        fit_out+='<p style="background-color:#d1ffb3">normal<br>';
                    fit_lmt = h & 0b00001111; def = !! (h & MESSAGE_TYPE);
                }
                fit_out+= 'local message type:'+fit_lmt+'<br>';
                if (def) { // definition
                    fit_out+= 'definition message<br>';
                    i++;
                    let fit_arch = new DataView(fr["result"], i++, 1).getUint8(0); // architecture type : little or big endian
                    if (fit_arch === 1) {
                        fit_out+= 'Big Endian<br>';endian = false;
                    } else {
                        fit_out+= 'Little Endian<br>';endian = true;
                    }
                    let fit_GMN = new DataView(fr["result"], i, 2).getUint16(0,endian);i+=2;
                    fit_out+= 'Global Message Number:'+fit_GMN+' '+mesg_num[fit_GMN]+'<br>';
                    let fit_fields = new DataView(fr["result"], i++, 1).getUint8(0);
                    fit_out+= 'Fields:'+fit_fields+'<br>';
                    let tmp = [];
                    for (let j=0;j<fit_fields;j++){
                        let fit_fd0 = new DataView(fr["result"], i++, 1).getUint8(0);
                        let fit_fd1 = new DataView(fr["result"], i++, 1).getUint8(0);
                        let fit_fd2 = new DataView(fr["result"], i++, 1).getUint8(0);
                        fit_out+= 'FDN:'+fit_fd0+' ; size:'+fit_fd1+' ; BT:'+fit_fd2+'<br>';
                        tmp.push([fit_fd0, fit_fd1, fit_fd2]);
                    }
                    fit_definition[fit_lmt] = [[fit_GMN], tmp]
                } else {
                    fit_out+= 'data message<br>';
                    let fit_GMN = fit_definition[fit_lmt][0];
                    let tmp = fit_definition[fit_lmt][1];
                    fit_out+= 'Global Message Number:'+fit_GMN+' '+mesg_num[fit_GMN]+'<br>';
                    for (j=0; j<tmp.length; j++){
                        field = tmp[j];
                        f_val = getData(fr["result"], i, field[2], endian);
                        if (fit_GMN == '20') {
                            if (field[0] == 253) { // timestamp
                                let tmp = getData(fr["result"], i, field[2], endian);
                                f_val = new Date(631065600000+tmp*1000)
                            } else if (field[0] == 0) { // latitude
                                f_val = f_val * ( 180 / 2147483648 ) + "°";
                            } else if (field[0] == 1) { // longitude
                                f_val = f_val * ( 180 / 2147483648 ) + "°";
                            } else if (field[0] == 2) { // altitude
                                f_val = f_val / 5 - 500 + "m";
                            } else if (field[0] == 3) { // heart rate
                                f_val = f_val + " bpm";
                            } else if (field[0] == 4) { // cadence
                                f_val = f_val + " rpm";
                            } else if (field[0] == 5) { // distance
                                f_val = f_val / 100 + "m";
                            } else if (field[0] == 6) { // speed
                                f_val = f_val / 1000 + "m/s (" + (f_val*0.0036) + "km/h)";
                            } else if (field[0] == 7) { // power
                                f_val = f_val + "W";
                            } else if (field[0] == 29) { // cumulated power
                                f_val = f_val + "W";
                            }
                        }
                        i+=field[1];
                        fit_out+= 'f:'+f_val+' ';

                    }
                }
                fit_out+= '</p><hr>';
            }
            div_fit.innerHTML = fit_out;
        }
        
        function getData(f, i, t, e) { // get the data, file, index, type, endian
            switch (t) {
                case 140:
                    f_val = new DataView(f, i, 4).getUint32(0, e);
                    break;
                case 139:
                    f_val = new DataView(f, i, 4).getUint16(0, e);
                    break;
                case 134:
                    f_val = new DataView(f, i, 4).getUint32(0, e);
                    break;
                case 133:
                    f_val = new DataView(f, i, 4).getInt32(0, e);
                    break;
                case 132:
                    f_val = new DataView(f, i, 2).getUint16(0, e);
                    break;
                case 131:
                    f_val = new DataView(f, i, 2).getInt16(0, e);
                    break;
                case 10:
                    f_val = new DataView(f, i, 2).getUint8(0, e);
                    break;
                case 7:
                    f_val = Utf8ArrayToStr(new Uint8Array(f, i, field[1]-1));
                    break;
                case 2:
                    f_val = new DataView(f, i, 1).getUint8(0, e);
                    break;
                case 1:
                    f_val = new DataView(f, i, 1).getInt8(0, e);
                    break;
                case 0:
                    f_val = new DataView(f, i, 1).getUint8(0, e);
                    break;
                default:
                    f_val='*';
                    break;
            }
            return f_val;
        }
    </script>
    </body>
</html>